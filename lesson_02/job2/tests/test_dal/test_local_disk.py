import json
from unittest import TestCase, mock
from lesson_02.job2.dal.local_disk import save_to_disk, infer_avro_schema_from_json, transform_to_avro_record


class SaveToDiskTestCase(TestCase):
    def test_infer_avro_schema_from_json(self):
        json_content = [{"name": "Alice", "age": 30, "is_member": True}]
        expected_schema = {
            'type': 'record',
            'name': 'AutoGeneratedSchema',
            'namespace': 'com.example',
            'fields': [
                {'name': 'name', 'type': 'string'},
                {'name': 'age', 'type': 'int'},
                {'name': 'is_member', 'type': 'boolean'}
            ]
        }
        schema = infer_avro_schema_from_json(json_content)
        self.assertEqual(schema, expected_schema)

    def test_transform_to_avro_record(self):
        json_record = {"name": "Alice", "age": 30, "is_member": True}
        avro_schema = {
            'type': 'record',
            'name': 'AutoGeneratedSchema',
            'namespace': 'com.example',
            'fields': [
                {'name': 'name', 'type': 'string'},
                {'name': 'age', 'type': 'int'},
                {'name': 'is_member', 'type': 'boolean'}
            ]
        }
        expected_avro_record = {"name": "Alice", "age": 30, "is_member": True}
        avro_record = transform_to_avro_record(json_record, avro_schema)
        self.assertEqual(avro_record, expected_avro_record)

    @mock.patch("lesson_02.job2.dal.local_disk.fastavro.writer")
    @mock.patch("builtins.open", new_callable=mock.mock_open, read_data="data")
    def test_save_to_disk_avro_format(self, mock_open, mock_fastavro_writer):
        json_content = [{"name": "Alice", "age": 30, "is_member": True}]
        path = "some/path/file.avro"

        save_to_disk(json_content, path)

        mock_open.assert_called_once_with(path, 'wb')
        mock_fastavro_writer.assert_called_once()
